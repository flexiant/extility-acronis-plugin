#!/usr/bin/perl

#	(c) 2015 Flexiant Limited
#
#	This script will use the username and password generated by the fco-acronis-plugin to register
#	an installation of the Acronis linux agent with the FCO credentials.
#
#	Input to this script will be the type of action that is to be performed, and the backup service agent which is only required for the install action. If not input is given, all is assumed.
#	
#	all - Performs the full-install, register, and details actions.
#	full-install - This action will update the system, install necessary packages for the install action, rpm, gcc, and make, then download the backup service agent and install the backup service agent.
#					If you specify the backup service agent as the second input parameter the agent will be installed without downloading a new copy.
#	install - This action will install the backup service agent. You must specify the backup service agent when invoking this action as the second input parameter.
#	register - This action will register the machine with the backup service. The install action, or full-install, must be complete before this can be invoked.
#	check - This action will check if the machine has been registered with the backup service. The install action, or full-install, must be complete before this can be invoked.
#	details - This action will display the credentials that will be used to register the machine with the backup service, including the service management url, customer username, and customer password.
#
#
#	Example 1.
#	perl fco-acronis-setup-script.pl all
#
#	Example 2.
#	perl fco-acronis-setup-script.pl install Backup_Client_for_Linux.bin
#
#	Example 3.
#	perl fco-acronis-setup-script.pl register

use strict;
use warnings;

my $acronisURL;
my $acronisUsername;
my $acronisPassword;

my $action = $ARGV[0] if ( $#ARGV >= 0 );
my $agent = $ARGV[1] if ( $#ARGV >= 1 );

if(not defined($action)){
	$action = "all";
}

my $setup = 0;
my $install = 0;
my $register = 0;
my $details = 0;
my $check = 0;

if($action eq "all"){
	$setup = 1;
	$install = 1;
	$register = 1;
}elsif($action eq "full-install"){
	$setup = 1;
	$install = 1;
}elsif($action eq "fullinstall"){
	$setup = 1;
	$install = 1;
}elsif($action eq "install"){
	$install = 1;
}elsif($action eq "register"){
	$register = 1;
}elsif($action eq "details"){
	$details = 1;
}elsif($action eq "check"){
	$check = 1;
}else{
	print STDERR "No action argument found, expecting all, full-install, install, register, or details\n";
	exit;
}

if($setup){	
	print "Updating system\n";
	
	my $osType = qx(python -mplatform);
	$osType =~ s/^\s+|\s+$//g;
	
	if ( index( $osType, "Ubuntu" ) != -1 ) {
		system("sudo apt-get --yes --force-yes update");
	
		print "Installing necessery packages\n";
		system("sudo apt-get --yes --force-yes install wget rpm gcc make");
	}
	elsif ( index( $osType, "centos" ) != -1 ) {
		system("sudo yum -y check-update");
	
		print "Installing necessery packages\n";
		system("sudo yum -y install wget kernel-devel rpm gcc make");
	}
	else {
		print STDERR "Setup not supported by this operating system $osType\n";
		print STDERR "You may still be able to install the backup service but you must install any dependencies manually\n";
	}
	
	if(not defined($agent)){
		my $defaultAgent = "/tmp/Backup_Client_for_Linux.bin";
		
		print "Downloading backup client agent\n";
		system("sudo wget -O $defaultAgent 'http://dl.managed-protection.com/u/baas/Backup_Client_for_Linux_en-US_x86_64.bin'");
		system("sudo chmod 755 $defaultAgent");
	
		$agent = $defaultAgent; 
	}
}

if($register or $details or $check){
	readMetadata();

	if(not defined($acronisURL)){
		print STDERR "No FCO/Acronis metadata found\n";
		exit;
	}

	if($details){
		print "Registration credentials\n";
		print "Management URL $acronisURL\n";
		print "Username $acronisUsername\n";
		print "Password $acronisPassword\n";
	}
}

if($install){
	if(not defined($agent)){
		print STDERR "No backup agent defined\n";
		exit;
	}
	
	if($register){
		print "Installing backup agent and registering server with backup service\n";
		system ("sudo $agent -a -C $acronisURL -g $acronisUsername -w $acronisPassword");
	}else{
		print "Installing backup agent\n";
		system ("sudo $agent -a");
	}
}elsif($register){
	print "Registering server with Backup Service\n";
	system ("sudo /usr/lib/Acronis/BackupAndRecovery/AmsRegisterHelper register $acronisURL $acronisUsername $acronisPassword");
}elsif($check){
	print "Checking server registration with Backup Service\n";
	system ("sudo /usr/lib/Acronis/BackupAndRecovery/AmsRegisterHelper check $acronisURL $acronisUsername $acronisPassword");
}

print "Setup Complete\n";

sub readMetadata {
	my $acronis_metadata=`curl -s 'http://169.254.169.254/metadata' | grep -o -P '(?<=<fco-acronis>).*(?=</fco-acronis>)'`;

	my $startTag = "<url>";
	my $endTag  = "</url>";
	my @url = $acronis_metadata =~ /$startTag(.*)$endTag/;
	$acronisURL = $url[0];
	
	$startTag = "<username>";
	$endTag  = "</username>";
	my @username = $acronis_metadata =~ /$startTag(.*)$endTag/;
	$acronisUsername = $username[0];
	
	$startTag = "<password>";
	$endTag  = "</password>";
	my @password = $acronis_metadata =~ /$startTag(.*)$endTag/;
	$acronisPassword = $password[0];
}